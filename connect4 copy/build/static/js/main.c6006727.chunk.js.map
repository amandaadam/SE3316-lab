{"version":3,"sources":["App.js","index.js"],"names":["Hole","props","className","value","Slat","onClick","handleClick","Array","holes","length","map","x","j","Board","state","boardState","fill","playerTurn","gameSelected","winner","moves","isDraw","this","setState","slatID","boardCopy","arr","slice","indexOf","newSlat","reverse","newMoves","makeMove","bs","c","r","checkLine","checkWinner","console","log","endMessage","slats","i","selectedGame","Component","App","a","b","d","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6006727.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\n\n//create the holes\nfunction Hole(props){ \n  return <div className=\"Hole\"><div className={props.value}></div></div>\n}\n\n//create the slats \nfunction Slat(props){\n    return <div className=\"Slat\" onClick={() => props.handleClick()}>\n      {[...Array(props.holes.length)].map((x, j) => \n        <Hole key={j} value={props.holes[j]}></Hole>)}\n      </div>\n }\n\nclass Board extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      boardState: new Array(7).fill(new Array(6).fill(null)),\n      playerTurn: 'Red',\n      gameSelected: false,\n      winner: '',\n      moves: 0, //keep track of how many moves have been made\n      isDraw: false,\n    }\n  }\n\n  selectedGame(){\n    this.setState({\n       gameSelected: true, \n       boardState: new Array(7).fill(new Array(6).fill(null)),\n       //when a new game is started, need to reset moves, isDraw, and Winner back starting values\n       moves: 0, \n       isDraw: false,\n       winner: ''\n    })\n  }\n\n  makeMove(slatID){\n    const boardCopy = this.state.boardState.map(function(arr) {\n      return arr.slice();\n    });\n    if( boardCopy[slatID].indexOf(null) !== -1 ){\n      let newSlat = boardCopy[slatID].reverse()\n      newSlat[newSlat.indexOf(null)] = this.state.playerTurn\n      newSlat.reverse()\n      const newMoves = this.state.moves + 1; //counter to keep track of number of moves\n\n      this.setState({\n        playerTurn: (this.state.playerTurn === 'Red') ? 'Yellow' : 'Red',\n        boardState: boardCopy,\n        moves: newMoves,\n      })\n    }\n  }\n\n  //make a move if there is still no winner\n  handleClick(slatID) {\n    if(this.state.winner === ''){\n      this.makeMove(slatID)\n    }\n  }\n  \n  //check the game status on every update\n  componentDidUpdate(){\n    //use checkWinner function \n    let winner = checkWinner(this.state.boardState);\n\n    console.log(this.state.moves);\n\n    //check if draw\n    if (this.state.moves === 42 && !this.state.isDraw) {\n      this.setState({isDraw: true});\n    }\n\n    //check if winner\n    if(this.state.winner !== winner){\n      this.setState({winner: winner})\n    }\n  }\n\n  render(){\n\n    //If the game is over, display message\n    let endMessage\n    if(this.state.winner !== \"\" || this.state.isDraw){\n      endMessage = \"winnerMessage appear\"\n    } \n   \n    //Create board with slats and holes\n    let slats = [...Array(this.state.boardState.length)].map((x, i) => \n      <Slat \n          key={i}\n          holes={this.state.boardState[i]}\n          handleClick={() => this.handleClick(i)}\n      ></Slat>\n    )\n\n    return ( //display the board, the end message, and play button\n      <div>\n        {this.state.gameSelected &&\n          <div className=\"Board\">\n            {slats}\n          </div>\n        }\n        <div className={endMessage}>{this.state.isDraw ? 'Draw!' : this.state.winner}</div>\n        {(!this.state.gameSelected || this.state.winner !== '' || this.state.isDraw) &&\n          <div>\n            <button onClick={() => this.selectedGame('Play')}>Let's Play!</button>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Connect-4 Game</h2>\n        </div>\n        <div className=\"Game\">\n          <Board></Board>\n        </div>\n      </div>\n    );\n  }\n}\n\n//function to check lines and return a boolean value\nfunction checkLine(a,b,c,d) {\n    return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n\n//function to check if there is a winner\nfunction checkWinner(bs) {\n    for (let c = 0; c < 7; c++)\n        for (let r = 0; r < 4; r++)\n            if (checkLine(bs[c][r], bs[c][r+1], bs[c][r+2], bs[c][r+3]))\n                return bs[c][r] + ' wins!'\n\n    for (let r = 0; r < 6; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(bs[c][r], bs[c+1][r], bs[c+2][r], bs[c+3][r]))\n                 return bs[c][r] + ' wins!'\n\n    for (let r = 0; r < 3; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(bs[c][r], bs[c+1][r+1], bs[c+2][r+2], bs[c+3][r+3]))\n                 return bs[c][r] + ' wins!'\n\n    for (let r = 0; r < 4; r++)\n         for (let c = 3; c < 6; c++)\n             if (checkLine(bs[c][r], bs[c-1][r+1], bs[c-2][r+2], bs[c-3][r+3]))\n                 return bs[c][r] + ' wins!'\n\n    return \"\";\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}